{% macro mappingInputTable(provider, plugin) %}
    {% import '_includes/forms' as craftForms %}
    {% import _self as forms %}

    {% if provider.getType() == constant('\\flipbox\\saml\\core\\models\\SettingsInterface::SP') and plugin.settings.isIDP() %}
        {{ forms.nameIdSection(provider, plugin) }}
    {% endif %}

    {% if provider.getType() == constant('\\flipbox\\saml\\core\\models\\SettingsInterface::IDP') and plugin.settings.isSP() %}
        {{ forms.nameIdSectionForSP(provider, plugin) }}
    {% endif %}

    <h2>Mapping</h2>
    {% set cols = {
        attributeName: {
            type: 'text',
            heading: 'Attribute Name',
        },
        craftProperty: {
            type: 'select',
            heading: 'Craft User Property',
            options: craft.samlCp.getMappingFieldOptions(
                plugin.settings.isIDP()
            ),
        },
    } %}

    {% if plugin.settings.isIDP() %}
        {% set cols = cols | merge({
            templateOverride: {
                type: 'singleline',
                heading: 'Templated Override',
            }
        }) %}
    {% endif %}
    {{ craftForms.editableTableField({
        label: "User Attribute Mapping"|t(plugin.handle),
        instructions: plugin.settings.isIDP()
            ? 'Configure the user attributes sent to the Service Provider. Map the SAML assertion attributes by defining the name of the attribute to the Craft CMS properties and fields. Use "Template Overrides" to do more complex logic. "Template Overrides" works exactly like ["Entry URI Format"](https://docs.craftcms.com/v3/sections-and-entries.html#entry-uri-formats). and can have twig templating logic to build the value of the attribute. Any value within the "Template Override" column will nullify the selection of the "Craft User Property" column.'
            : 'Map the SAML assertion attributes to the Craft CMS properties and fields.',
        id: 'mapping',
        name: 'mapping',
        addRowLabel: "Add a new mapping",
        cols: cols,
        rows: provider.getMapping(),
        fullWidth: true,
        allowAdd: true,
        allowDelete: true,
        allowReorder: true,
        errors: provider.getErrors('mapping')
    }) }}

    {% if provider.getType() == constant('\\flipbox\\saml\\core\\models\\SettingsInterface::SP') and plugin.settings.isIDP() %}
        <h3>
            Preview Mapping
        </h3>
        <div class="field">
            <div class="heading">
                <div class="instructions">
                    <p>
                        You must save before previewing the SAML assertion.
                    </p>
                </div>
            </div>
        </div>
        {{ craftForms.textField({
            instructions: "Enter user id to test different users."|t(plugin.handle ),
            name: "userId",
            id: 'userId',
            value: currentUser.id
        }) }}
        <div class="input ltr">
            <a id="show-mapping-preview" role="button" class="btn">Preview Mapping</a>
        </div>
        <pre>
            <code id="preview-mapping" class="html hidden">
            </code>
        </pre>

        {% do view.registerJsFile("//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js") %}
        {% do view.registerCssFile("//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/tomorrow-night-blue.min.css") %}
        {% js %}
            hljs.initHighlightingOnLoad();
        {% endjs %}
        {% css %}
            #show-mapping-preview {
            margin: 20px 0;
            }
        {% endcss %}

        {% do view.registerAssetBundle("flipbox\\saml\\core\\web\\assets\\bundles\\SamlCore") %}
        {% js %}
            new Craft.SamlCoreMappingPreview(
                $('#show-mapping-preview'),
                $('#preview-mapping'),
                '{{ plugin.handle }}',
                '{{ provider.id }}',
                $('#userId')
            );
        {% endjs %}
    {% endif %}
{% endmacro %}

{% macro nameIdSectionForSP(provider, plugin) %}
    {% import '_includes/forms' as forms %}
    <h2>Username/NameID Override</h2>
    {{ forms.textField({
        label: "NameID Override/Mapping"|t(plugin.handle),
        id: 'nameIdOverride',
        name: 'nameIdOverride',
        placeholder: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
        instructions: "By default, the NameID will be used as for the Craft user's username. If the value with the NameID field is not desired, map a different attribute here. The field you specify is here is one that is being sent over in the SAML Response, as an Assertion Attribute.",
        value: provider.nameIdOverride,
        errors: provider.getErrors('nameIdOverride')
    }) }}

{% endmacro %}
{% macro nameIdSection(provider, plugin) %}
    {% import '_includes/forms' as forms %}
    <h2>NameID</h2>

    <div class="field">
        <div class="heading">
            <div class="instructions">
                <p>
                    NameID is essentially the username the Service Provider will use as the user's unique identifier.
                    Build the NameID with available Craft CMS user properties. This field works exactly like
                    <a target="_blank"
                       href="https://docs.craftcms.com/v3/sections-and-entries.html#entry-uri-formats">
                        "Entry URI Format".
                    </a>
                    and can have twig templating logic build the value of the NameID.
                </p>
            </div>
        </div>
    </div>
    {{ forms.autosuggest({
        label: "NameID Override/Mapping"|t(plugin.handle),
        id: 'nameIdOverride',
        name: 'nameIdOverride',
        placeholder: "{username}",
        value: provider.nameIdOverride,
        suggestions: craft.samlCp.getMappingAutoSuggestions(),
        errors: provider.getErrors('nameIdOverride')
    }) }}

{% endmacro %}
