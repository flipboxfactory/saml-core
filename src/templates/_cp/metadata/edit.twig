{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}
{% import "saml-core/_cp/metadata/_macros/utils" as utils %}

{% set fullPageForm=1 %}

{% set tabs = {
    security: {
        id:'security',
        class: 'security',
        url: '#security',
        label: 'Security'
    },
    configure: {
        id:'configure',
        class: 'configure',
        url: '#configure',
        label: 'Configure'
    },
    metadata: {
        id: 'metadata',
        class: 'metadata',
        url: '#metadata',
        label: 'Metadata'
    },
} %}

{% block details %}
    <div>
        <div class="meta">
            <div class="data first">
                <h5 class="heading">{{ "Enabled"|t('app') }}</h5>
                <div class="value flex">
                    <div class="flex-grow">
                        <span class="status {% if provider.enabled %}active{% else %}inactive{% endif %}"></span>
                        {% if provider.enabled %}Enabled{% else %}Disabled{% endif %}
                    </div>
                </div>
            </div>
            <input type="hidden" name="providerType" value="{{ provider.id ? provider.type : createType }}">
        </div>
        <div class="meta">
            <div class="data" style="padding: .7rem 1.5rem;font-size:smaller">
                Entity ID is the unique ID for your provider.
            </div>
            <div class="data" style="padding: .7rem 1.5rem" >
                <div class="required">
                    <label>
                        Entity ID
                    </label>
                </div>
                <div class="">
                    <div class="" style="margin-right: 1rem">
                        {% if myType == provider.type or myType == createType %}
                            {{ forms.textField({
                                name: "entityId",
                                id: 'entityId',
                                class: "code",
                                value: provider.entityId ?: ownEntityId,
                                errors: provider.getErrors('entityId'),
                                readonly: false,
                                disabled: false
                            }) }}
                        {% else %}
                            {{ forms.textField({
                                name: "entityId",
                                id: 'entityId',
                                class: "code",
                                value: provider.entityId,
                                errors: provider.getErrors('entityId'),
                                readonly: true,
                                disabled: true
                            }) }}
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        {% if myType == provider.type or myType == createType %}
            <div class="meta">
                <div class="data" style="padding: .7rem 1.5rem;font-size:smaller">
                    Choose the Craft Site you'd like to associate this provider with.
                </div>
                <div class="data" style="padding: .7rem 1.5rem" >
                    {% set sites = [
                        {
                            label: 'Control Panel',
                            value: ''
                        },
                        {
                            label: '──────────',
                            value: '-',
                            disabled: true
                        }
                    ]|merge(craft.app.sites.allSites()|map(site => ({
                        label: site.name,
                        value: site.id,
                    }))) %}
                    <div class="required">
                        <label>
                            Site
                        </label>
                    </div>
                    <div class="" style="margin-right: 1rem">
                            {{ forms.selectField({
                                id: 'providerSite',
                                name: 'providerSite',
                                value: provider.id ? provider.siteId : '',
                                errors: provider.getErrors('site'),
                                options: sites,
                                required: true
                            }) }}
                    </div>
                </div>
            </div>
        {% endif %}
        <div class="meta">
        </div>
        {% if provider.id %}
            <hr>
            <div class="meta read-only">
                <div class="data">
                    <h5 class="heading">{{ "Created at"|t('app') }}</h5>
                    <div class="value">{{ provider.dateCreated|datetime('short') }}</div>
                </div>
                <div class="data">
                    <h5 class="heading">{{ "Updated at"|t('app') }}</h5>
                    <div class="value">{{ provider.dateUpdated|datetime('short') }}</div>
                </div>
            </div>
        {% endif %}
    </div><!-- #settings -->
{% endblock %}

{% block content %}

    <div id="name">
        <input type="hidden" name="action"
               value="{{ baseActionPath }}/metadata/{% if createType == myType or myType == provider.type %}auto-create{% else %}save{% endif %}">
        {{ redirectInput(baseCpPath ~ '/metadata/' ) }}

        {% if provider.id %}<input type="hidden" name="identifier" value="{{ provider.id }}">{% endif %}

        {{ forms.textField({
            label: "Label"|t(plugin.handle ),
            instructions: "Friendly name for the provider. You can use the providers name (like `OKTA`) or the environment (`DEV`) so everyone knows it's purpose."|t(plugin.handle ),
            name: "label",
            id: 'label',
            required: true,
            value: provider.label,
            errors: provider.getErrors('label'),
        }) }}
    </div>
    <hr>
    {#
        Default showing
    #}
    <div id="security" class="flex-fields">
        {% if createType == myType %}
            <h2>Key Pairs</h2>
            <div class="field">
                <div class="instructions">
                    <p>
                        {% if provider.keychain %}
                            <a download
                                style="margin-right: 1rem"
                                class="go"
                                href="{{ actionUrl(plugin.handle ~ '/metadata/download-certificate?keyId='~provider.keychain.id) }}">
                                Download Certificate
                            </a>
                        {% endif %}
                        <a class="go"
                            href="{{ cpUrl(plugin.handle ~ '/keychain') }}"
                        >Manage key pairs</a>
                    </p>
                    <p>Be careful when changing the keys. You need to exchange the certificate with the other
                        provider to make new keys work correctly.</p>
                    <p>
                        Note: It is <strong>highly recommended</strong> to create and assign a key pair.
                    </p>
                </div>
            </div>
            {{ forms.selectField({
                label: "Select Existing Key Pair"|t(plugin.handle),
                id: 'keychain',
                name: 'keychain',
                value: provider.keychain ? provider.keychain.id : '',
                errors: provider.getErrors('keychain'),
                options: allkeypairs|merge([{label:'None',value:null}]),
                required: true,
                fieldClass: 'width-50'
            }) }}
            <div class="field width-50">
                <div class="heading">
                    <label>Automatically Generate and Assign a New Key Pair</label>
                </div>
                <div class="input ltr">
                    <a id="generate-key" role="button" class="btn submit">Generate key pair</a>
                </div>
                {% do view.registerAssetBundle("flipbox\\keychain\\web\\assets\\bundles\\GenerateKeyPair") %}
                {% js %}
                    new Craft.GenerateKeyPair(
                        $('#generate-key'),
                        $('#keychain'),
                        "{{ plugin.handle }}"
                    );
                {% endjs %}
            </div>
        {% endif %}
        {% if myType == 'idp' and provider.type == 'sp' %}
            <div class="field">
                <h2>Encryption</h2>
                <div class="heading">
                    <label>{{ "Wants Encrypt Assertions"|t(plugin.handle) }}</label>
                </div>
                {{ forms.lightswitch({
                    label: "Encrypt Assertions"|t(plugin.handle),
                    id: 'encryptAssertions',
                    name: 'encryptAssertions',
                    on: provider.encryptAssertions,
                    errors: provider.getErrors('encryptAssertion'),
                    toggle: 'assertion-encryption-settings',
                }) }}

            </div>

        {% endif %}

        {% import 'saml-core/_cp/metadata/_macros/mapping' as  map %}
    </div>

    <div id="configure" class="hidden flex-fields">
        {% if (( myType == 'sp' and provider.isIdentityProvider() ) or ( myType == 'idp' and provider.isServiceProvider() )) and provider.loginPath %}
            <h2>Login/Logout Paths</h2>
            {{ forms.textField({
                label: "Login Path"|t(plugin.handle ),
                instructions: myType == 'sp' ?
                    "Use this as the `loginPath` value in the `general.php` configuration file."|t(plugin.handle ) :
                    "URL to initiate SSO via IDP. In human terms, " ~
                    "goto this link to initiate login with this Service Provider. " ~
                    "[More Info](https://saml-idp.flipboxfactory.com/initiating-sso.html#identity-provider-idp-initiated)",
                id: 'loginPath',
                class: "code",
                value: (myType == 'sp' and provider.isIdentityProvider()) ? provider.loginRequestPath : provider.getLoginRequestEndpoint(),
                readonly: true,
            }) }}

            {{ forms.textField({
                label: "Logout Path"|t(plugin.handle ),
                instructions: "Use this URL to initiate Single Logout (SLO) with this provider."|t(plugin.handle ),
                id: 'logoutPath',
                class: "code",
                value: (myType == 'sp' and provider.isIdentityProvider()) ? provider.logoutRequestPath : provider.getLogoutRequestEndpoint(),
                readonly: true,
            }) }}
        {% endif %}

        {# Mapping #}
        {% if (myType == 'sp' and provider.type == 'idp') or (myType == 'idp' and provider.type == 'sp') %}
            {% import 'saml-core/_cp/metadata/_macros/mapping' as  map %}
            {{ map.mappingInputTable(
                provider, plugin
            ) }}
            <br/>
        {% endif %}

        {# Groups #}
        {% if (myType == 'idp' and provider.type == 'sp') %}
            {% import 'saml-core/_cp/metadata/_macros/groups' as  groups %}
            <h2>Groups</h2>
            {{ groups.syncOptions(provider, plugin) }}

            {{ groups.conditionalAllow(provider, plugin) }}
            <br>
            <br>
        {% endif %}

    </div>
    <div id="metadata" class="hidden flex-fields">
        <h2>Metadata Options</h2>

        {% if createType != myType %}
            <p>Metadata can be configured in *ONE* of the following ways. One of the following is required.</p>
            {{ forms.textField({
              label: "1. Metadata By URL"|t('app'),
              instructions: 'If the URL is public the metadata will be fetched on save. This can be helpful if the metadata or certificates change frequently. Simply hit save to refresh the metadata.',
              id: 'metadata-url-text',
              name: 'metadata-url-text',
              autocomplete: false,
              value: provider.getMetadataOptions().url,
              errors: provider.getErrors('metadata-url-text'),
            }) }}
        {% endif %}
        {% set headingSuffix %}
        <div class="flex-grow"></div>
        {{ utils.copyFieldContents('metadata-text') }}
        {% endset %}
        {{ forms.textareaField({
          label: createType == myType ? 'Metadata XML' : '2. Metadata XML',
          headingSuffix: headingSuffix,
          instructions: createType == myType ?
              "Share this XML with the other provider." :
              "Paste Metadata XML from the provider. This will be overwritten when the Metadata Url is being used."|t(plugin.handle ),
          class: "code",
          id: 'metadata-text',
          name: createType == myType ? null : 'metadata-text',
          value: createType == myType and not provider.metadata ? 'This field is created automatically.' : provider.metadata,
          readonly: createType == myType ? true : false,
          errors: provider.getErrors('metadata-text'),
          rows: 10
      }) }}


        {% if provider.id %}
            <h2>Bindings</h2>
            {% if singleSignOnServices %}
                {% for binding, singleSignOnService in singleSignOnServices %}
                    {{ forms.textField({
                        label: "Single Signon Service (SSO) "|t(plugin.handle ),
                        instructions: "Binding: " ~ binding|t(plugin.handle ),
                        id: 'acs',
                        class: "acs",
                        value: singleSignOnService,
                        errors: provider.getErrors('acs'),
                        readonly: true,
                    }) }}
                {% endfor %}

            {% endif %}

            {% if assertionConsumerServices %}
                {% for binding, assertionConsumerService in assertionConsumerServices %}
                    {{ forms.textField({
                        label: "Assertion Consumer Service (ACS) " |t(plugin.handle ),
                        instructions: "Binding: " ~ binding|t(plugin.handle ),
                        id: 'acs',
                        class: "acs",
                        value: assertionConsumerService,
                        errors: provider.getErrors('acs'),
                        readonly: true,
                    }) }}
                {% endfor %}

            {% endif %}


            {% if singleLogoutServices %}
                {% for binding, singleLogoutService in singleLogoutServices %}
                    {{ forms.textField({
                        label: "Single Logout Service (SLO)" |t(plugin.handle ),
                        instructions: "Binding: " ~ binding|t(plugin.handle ),
                        id: 'acs',
                        class: "acs",
                        value: singleLogoutService,
                        errors: provider.getErrors('acs'),
                        readonly: true,
                    }) }}
                {% endfor %}

            {% endif %}
        {% endif %}

    </div>
{% endblock %}
